In general, formal methods are suitable to stable product development and market environments, where product requirements can be captured into formal specifications and remain fairly stable thereafter to allow for later refinements and verifications. Fortunately, most software sub-systems used in safety critical systems fall into this category, so that they can benefit from such formal methods. For products in volatile market environments, frequently requirement changes andsolution updates make the use of formal methods more difficult. However, if some risk analysis techniques is used to identify main risk areas and deal with them first, such as in the spiral process adapted formal methods can be applied to core functions to assure their quality, much like the identification of safety critical features for focused safety assurance. Model checking is an approach that automatically or algorithmically checks certain properties for some software systems.Model checking combines algorithmic checking of propositions through execution with formal assertions stated as the propositions with respect to software systems modeled as finite-state machines.Model checking and other formal analyses are closer to inspection and testing, in the sense that they may produce counterexamples during model checking or identify problems directly uring analyses. Such information can then be used to locate and fix related defects.The model checker is a software that runs an algorithm to check the validity of theproposition. If it is checked to be true, a proof is said to be produced. Otherwise,a counterexample is given, much like a failed test case that can be analyzed furtherfor defect fixing.Although model checking and some other formal analysis techniques have alleviated the problem to some degree, formal methods in general still remain a costly alternative for ensuring software quality. 
